// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                      String             @id @default(auto()) @map("_id") @db.ObjectId
  firstname               String?
  lastname                String?
  email                   String             @unique
  password                String?
  phoneNumber             String?
  birthDate               String?
  address                 Address?
  hashedRt                String?
  picture                 String?
  role                    UserRole           @default(user)
  provider                Provider?
  baby                    Baby[]
  resetPasswordDigits     String?
  phoneNumberVerifiaction String?
  user1                   FriendRequest[]    @relation("user1")
  user2                   FriendRequest[]    @relation("user2")
  friend1                 Friends[]          @relation("friend1")
  friend2                 Friends[]          @relation("friend2")
  UserGroup               UserGroup[]
  Posts                   Posts[]
  likes                   Likes[]
  comments                Comments[]
  MedicalDocuments        MedicalDocuments[]
  MedicalHistory          MedicalHistory[]
  Activities              Activities[]
  Feeding                 Feeding[]
  Growth                  Growth[]
  Firsts                  Firsts[]
  Reminders               Reminders[]
}

model Baby {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  babyName         String
  gender           Gender
  birthDate        String
  weight           Float?
  image            String?
  vacinations      Vacinations?
  Users            Users              @relation(fields: [usersId], references: [id])
  usersId          String             @db.ObjectId
  activities       Activities[]
  Feeding          Feeding[]
  Growth           Growth[]
  Firsts           Firsts[]
  Reminders        Reminders[]
  medicalHistory   MedicalHistory[]
  MedicalDocuments MedicalDocuments[]
}

model Activities {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  activity String
  date     String
  time     String
  note     String
  Baby     Baby   @relation(fields: [babyId], references: [id])
  babyId   String @db.ObjectId
  Users    Users  @relation(fields: [usersId], references: [id])
  usersId  String @db.ObjectId
}

model Feeding {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  food    String
  time    String
  date    String
  note    String
  Baby    Baby   @relation(fields: [babyId], references: [id])
  babyId  String @db.ObjectId
  Users   Users  @relation(fields: [usersId], references: [id])
  usersId String @db.ObjectId
}

model Growth {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  date    String
  weight  Float
  height  Float
  Baby    Baby   @relation(fields: [babyId], references: [id])
  babyId  String @db.ObjectId
  age     String
  Users   Users  @relation(fields: [usersId], references: [id])
  usersId String @db.ObjectId
}

model Firsts {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  date      String
  babyFirst String
  note      String
  Baby      Baby   @relation(fields: [babyId], references: [id])
  babyId    String @db.ObjectId
  Users     Users  @relation(fields: [usersId], references: [id])
  usersId   String @db.ObjectId
}

model Reminders {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  time    String
  date    String
  note    String
  Baby    Baby   @relation(fields: [babyId], references: [id])
  babyId  String @db.ObjectId
  Users   Users  @relation(fields: [usersId], references: [id])
  usersId String @db.ObjectId
}

model MedicalHistory {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  date       String
  doctorName String
  diagnosis  String
  Baby       Baby   @relation(fields: [babyId], references: [id])
  babyId     String @db.ObjectId
  age        String
  Users      Users  @relation(fields: [usersId], references: [id])
  usersId    String @db.ObjectId
}

model MedicalDocuments {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  document String
  Users    Users  @relation(fields: [usersId], references: [id])
  usersId  String @db.ObjectId
  Baby     Baby   @relation(fields: [babyId], references: [id])
  babyId   String @db.ObjectId
}

model FriendRequest {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user1Id String @db.ObjectId
  user1   Users  @relation(fields: [user1Id], references: [id], name: "user1")
  user2Id String @db.ObjectId
  user2   Users  @relation(fields: [user2Id], references: [id], name: "user2")
}

model Friends {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  friend1Id String @db.ObjectId
  friend1   Users  @relation(fields: [friend1Id], references: [id], name: "friend1")
  friend2Id String @db.ObjectId
  friend2   Users  @relation(fields: [friend2Id], references: [id], name: "friend2")
}

model Groups {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  groupName String
  groupType GroupType
  UserGroup UserGroup[]
}

model UserGroup {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  Users   Users  @relation(fields: [usersId], references: [id])
  usersId String @db.ObjectId
  group   Groups @relation(fields: [groupId], references: [id])
  groupId String @db.ObjectId
}

model Posts {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  Users    Users      @relation(fields: [usersId], references: [id])
  usersId  String     @db.ObjectId
  caption  String?
  image    String?
  video    String?
  likes    Likes[]
  comments Comments[]
}

model Likes {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  Users   Users  @relation(fields: [usersId], references: [id])
  usersId String @db.ObjectId
  post    Posts  @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
}

model Comments {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  Users     Users      @relation(fields: [usersId], references: [id])
  usersId   String     @db.ObjectId
  post      Posts      @relation(fields: [postId], references: [id])
  postId    String     @db.ObjectId
  tags      String[]
  replyTo   Comments?  @relation("replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String?    @db.ObjectId
  replies   Comments[] @relation("replies")
}

model DeleteAccountReasons {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  reason String
}

type Vacinations {
  vacin1 Vacin
  vacin2 Vacin
  vacin3 Vacin
}

type Vacin {
  age       String
  vacinated Boolean @default(false)
}

type Address {
  city String
  area String
}

enum UserRole {
  user
  admin
}

enum Provider {
  google
  facebook
}

enum Gender {
  boy
  girl
}

enum NotificationStatus {
  active
  inactive
}

enum GroupType {
  public
  private
}
